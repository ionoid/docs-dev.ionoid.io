(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{363:function(a,t,e){"use strict";e.r(t);var s=e(44),n=Object(s.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"iot-app-architecture"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#iot-app-architecture"}},[a._v("#")]),a._v(" IoT App Architecture")]),a._v(" "),e("p",[a._v("Ionoid IoT Apps are apps that are self contained with all their metadata\nincluded and dependencies.")]),a._v(" "),e("p",[a._v("Installed apps are located on device storage at:")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("/data/apps/store/\n")])])]),e("p",[a._v("For every application, there will be a corresponding directory:")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("/data/apps/store/appname\n")])])]),e("p",[a._v("All files corresponding to an App are located under its path. This make\nit easy to stop, "),e("strong",[a._v("disable")]),a._v(" then to completely remove applications.")]),a._v(" "),e("h2",{attrs:{id:"overview"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#overview"}},[a._v("#")]),a._v(" Overview")]),a._v(" "),e("h3",{attrs:{id:"iot-apps"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#iot-apps"}},[a._v("#")]),a._v(" IoT Apps")]),a._v(" "),e("p",[e("a",{attrs:{href:"https://ionoid.io/",target:"_blank",rel:"noopener noreferrer"}},[a._v("Ionoid.io"),e("OutboundLink")],1),a._v(" supports multiple IoT App formats:")]),a._v(" "),e("ol",[e("li",[e("p",[a._v("Static binaries without library or other filesystem dependencies.\nIf you are deploying "),e("a",{attrs:{href:"https://en.wikipedia.org/wiki/Static_build",target:"_blank",rel:"noopener noreferrer"}},[a._v("Static\nBinaries"),e("OutboundLink")],1),a._v(" then please keep\nreading this document.")])]),a._v(" "),e("li",[e("p",[a._v("Archive\n[tarball](https://en.wikipedia.org/wiki/Tar_(computing) or\n"),e("a",{attrs:{href:"https://en.wikipedia.org/wiki/Zip_(file_format)",target:"_blank",rel:"noopener noreferrer"}},[a._v("Zip"),e("OutboundLink")],1),a._v(" apps.\nIf you are deplying Archive apps then please keep reading this document.")])]),a._v(" "),e("li",[e("p",[a._v("Modern "),e("a",{attrs:{href:"https://docker.com",target:"_blank",rel:"noopener noreferrer"}},[a._v("docker"),e("OutboundLink")],1),a._v(" containers "),e("strong",[a._v("in progress - still\nunder development")]),a._v(".\nIf you are deploying "),e("a",{attrs:{href:"https://docker.com",target:"_blank",rel:"noopener noreferrer"}},[a._v("docker container"),e("OutboundLink")],1),a._v(" apps then\nplease go directly to this link "),e("RouterLink",{attrs:{to:"/apps/dockerApps.html"}},[a._v("docker Apps")])],1)]),a._v(" "),e("li",[e("p",[a._v("Universal Linux Apps "),e("a",{attrs:{href:"https://snapcraft.io/",target:"_blank",rel:"noopener noreferrer"}},[a._v("Ubuntu Snaps"),e("OutboundLink")],1),a._v(" "),e("strong",[a._v("in progress - still under development")]),a._v(".\nIf you are deploying Universal Linux Apps that are "),e("a",{attrs:{href:"https://snapcraft.io",target:"_blank",rel:"noopener noreferrer"}},[a._v("Ubuntu\nSnaps"),e("OutboundLink")],1),a._v(" then please do directly to this link "),e("RouterLink",{attrs:{to:"/apps/snapApps.html"}},[a._v("Snap\nApps")])],1)])]),a._v(" "),e("h3",{attrs:{id:"app-yaml-format"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#app-yaml-format"}},[a._v("#")]),a._v(" App YAML Format")]),a._v(" "),e("p",[a._v("Each App is described using The App yaml format. The App yaml is\na simple manifest to describe how the app should work, it is fully\ndescribed in the "),e("code",[a._v("app.yaml")]),a._v(" file, and only works with apps that\nare static binaries or archive apps.")]),a._v(" "),e("p",[a._v("Docker apps and Snaps do not need the "),e("code",[a._v("app.yaml")]),a._v(" file, they already\ncontain their own app manifest and are auto handled withing their\nappropriate agents.\nVisit this link for "),e("RouterLink",{attrs:{to:"/apps/dockerApps.html"}},[a._v("docker Apps")]),a._v(" or this one for\n"),e("RouterLink",{attrs:{to:"/apps/snapApps.html"}},[a._v("Snap Apps")]),a._v(".")],1),a._v(" "),e("p",[a._v("The "),e("code",[a._v("app.yaml")]),a._v(" file should be present in the root directory of an\narchive file. Every App must have its corresponding "),e("code",[a._v("app.yaml")]),a._v(" file.\nFor static binaries with no dependencies, an "),e("code",[a._v("app.yaml")]),a._v(" file will be\nauto-generated and used to define how the App should run.")]),a._v(" "),e("p",[a._v("The "),e("code",[a._v("app.yaml")]),a._v(" content:")]),a._v(" "),e("p",[a._v("(lines starting with "),e("code",[a._v("#")]),a._v(" are comments and have no futher semantics)")]),a._v(" "),e("div",{staticClass:"language-yaml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Name of APP must be Alphanumeric and can contain the following")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v('# special characters "_", "." and "-".')]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Minimum 2 characters, up to 64 characters.")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" appname\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Version of App")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("version")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1.0")]),a._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Description of App")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("description")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" My App\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# List of Applications inside the same IoT App, the final IoT")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# App can include one app entry or several apps.")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("apps")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n        "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("hello-world")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n                "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Environment Vars for Hello World Optional")]),a._v("\n                "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("environment")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n                        "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("A")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("      "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"ABC"')]),a._v("\n\n                "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Environment Files that contains Vars for App Optional")]),a._v("\n                "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("environmentfiles")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n                        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"/etc/hello-world-environment1"')]),a._v("\n                        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"/etc/hello-world-environment2"')]),a._v("\n\n                "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Optional command to be executed before the main app.")]),a._v("\n                "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Can be used to setup environment.")]),a._v("\n                "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("start-command")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v('   /bin/echo "starting hello'),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v('world"\n\n                '),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Main executable app")]),a._v("\n                "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("command")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("        /bin/hello"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("world\n\n                "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Optional command to be executed after the main app finishes")]),a._v("\n                "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Can be used to clean up state.")]),a._v("\n                "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("stop-command")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v('   /bin/echo "hello'),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v('world stopped"\n\n                '),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Daemon Command type takes one of these values:")]),a._v("\n                "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# * simple:     the process configured with command")]),a._v("\n                "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#               is the main process of the service.")]),a._v("\n                "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#               This is the default value if daemon is")]),a._v("\n                "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#               not set.")]),a._v("\n                "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# * forking:    it is expected that the process configured")]),a._v("\n                "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#               with command will call fork() as part")]),a._v("\n                "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#               of its start-up")]),a._v("\n                "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# * oneshot:    it is expected that the process configured")]),a._v("\n                "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#               with command will exit or terminate")]),a._v("\n                "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#")]),a._v("\n                "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# For more details check systemd service documentation.")]),a._v("\n                "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("daemon")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" simple "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("|")]),a._v(" forking "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("|")]),a._v(" oneshot\n\n                "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Starting from newer versions, to have the app run with")]),a._v("\n                "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# root privileges you have set it to true")]),a._v("\n                "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("privileged")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token boolean important"}},[a._v("true")]),a._v("\n\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("volumes")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Volumes and mounts to be made accessible inside the application.")]),a._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#")]),a._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Volumes support two types of mount 'rbind' and 'norbind':")]),a._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#   * rbind: perform a recursive bind mount of the volume.")]),a._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#   * norbind: perform a non-recusive bind mount.")]),a._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#")]),a._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Volumes support different options:")]),a._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#   * rw: perform a regular writable bind mount (unless source is read-only).")]),a._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#   * ro: perform a read-only bind mount.")]),a._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#")]),a._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v(" src=filesystem_path"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("dst=app_path"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("type=rbind"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("options=rw\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v(" src=filesystem_path"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("dst=app_path"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("type=norbind"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("options=ro\n\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# /dev, /proc and /sys are already mounted inside the app")]),a._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# no need to mount them again.")]),a._v("\n\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Mounting etc configuration inside the app:")]),a._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v(" src=/etc"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("dst=/etc"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("type=rbind"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("options=ro\n\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# If you want to make the root-filesystem available then the")]),a._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# following volume mount is the safest instruction.")]),a._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v(" src=/"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("dst=/"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("type=norbind"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("options=ro\n\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Health check is a special command to do health checking on")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# your one or multiple apps")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# still under development")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("health-check")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n                "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("command")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("        /bin/health"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("check\n")])])]),e("p",[a._v("The "),e("code",[a._v("apps")]),a._v(" field may contain several entries if you want to launch several IoT\nApps together, distribute them together, or share the running\nenvironment. However we would recommend to always have one command per\nApp.")]),a._v(" "),e("p",[a._v("The "),e("code",[a._v("health-check")]),a._v(" field is a special directive that may allow you to do\nhealth checks on your running apps. Right now it is "),e("strong",[a._v("in progress - still under\ndevelopment")]),a._v(".")]),a._v(" "),e("p",[a._v("So for a first example the "),e("a",{attrs:{href:"https://storage.googleapis.com/public.opendevices.io/apps/arch/armv7/hello-world/hello-world-armv7-v0.2.tar",target:"_blank",rel:"noopener noreferrer"}},[a._v("Hello World IoT App Example:"),e("OutboundLink")],1)]),a._v(" "),e("p",[a._v("The content of the "),e("code",[a._v("app.yaml")]),a._v(" file would be:")]),a._v(" "),e("div",{staticClass:"language-yaml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" hello"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("world\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("version")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1.0")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("apps")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n        "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("hello-world")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n                "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("command")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("        /bin/hello"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("world\n")])])]),e("h3",{attrs:{id:"app-persist-data"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#app-persist-data"}},[a._v("#")]),a._v(" App Persist Data")]),a._v(" "),e("p",[a._v("If you want to persist your data on the device and share it with other\napplications and the rest of the system, then this can be easily done by\nwriting to the "),e("code",[a._v("/shared/$myappname")]),a._v(" directory volume. Every application has by\ndefault the "),e("code",[a._v("/shared/$myappname")]),a._v(" volume mounted and available inside its\nfilesystem.")]),a._v(" "),e("p",[a._v("From the application point of view:")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("/shared/"),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$myappname")]),a._v("\n")])])]),e("p",[a._v("From the rest of the system point of view and where you will find your data:")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("/data/apps/shared/"),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$myappname")]),a._v("\n")])])]),e("p",[a._v("The "),e("code",[a._v("/shared/$myappname")]),a._v(" directory is "),e("strong",[a._v("world readable and accessible")]),a._v("\nto the system. If you write secret files there, then make sure to set the\nappropriate access permissions, especially if your device is used by non-trusted\nthird parties.")]),a._v(" "),e("p",[a._v("The "),e("code",[a._v("/shared/$myappaname")]),a._v(" directory is owned by:")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("User: ionoid-app - means all applications running with that User ID can write to it.\nGroup: ionoid-app  - means all applications running with that Group ID can write to this directory and share data.\n")])])]),e("p",[a._v("Volumes and mounts are the preferred mechanism to persist data on the\ndevice by applications and share it with others.")]),a._v(" "),e("h2",{attrs:{id:"static-binaries"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#static-binaries"}},[a._v("#")]),a._v(" Static Binaries")]),a._v(" "),e("p",[a._v("Static binaries are apps without libraries or other filesystem\ndependencies. Please visit "),e("a",{attrs:{href:"https://en.wikipedia.org/wiki/Static_build",target:"_blank",rel:"noopener noreferrer"}},[a._v("wikipedia Static\nBinaries"),e("OutboundLink")],1),a._v(" link to read more\nabout it.")]),a._v(" "),e("p",[a._v("Building static binaries differs from one language and environment to another, the following documentation will try to help you get started\nwith it.")]),a._v(" "),e("p",[a._v("The target OS here is of course "),e("code",[a._v("Linux")]),a._v(".")]),a._v(" "),e("h3",{attrs:{id:"golang-static-binaries"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#golang-static-binaries"}},[a._v("#")]),a._v(" Golang Static Binaries")]),a._v(" "),e("p",[a._v("Before we start with our steps on how to produce static binaries from\nGolang sources, lets see some variables and environments that we have to\nset, this will allows us to really produce statically linked binaries.")]),a._v(" "),e("p",[e("code",[a._v("CGO_ENABLED=0")]),a._v(" Instruct compiler to disable CGO and statically link C\nbindings.")]),a._v(" "),e("p",[e("code",[a._v("GOOS=linux")]),a._v(" Our target Operating System is Linux.")]),a._v(" "),e("p",[e("code",[a._v("GOARCH=$arch")]),a._v(" Our target board architecure. If in doubts please visit\nour "),e("a",{attrs:{href:"https://docs.ionoid.io/#/../NewProject/newProject?id=supported-boards-and-operating-systems-table",target:"_blank",rel:"noopener noreferrer"}},[a._v("Supported boards\nTable"),e("OutboundLink")],1),a._v(".\nCurrent supported values for "),e("code",[a._v("$arch")]),a._v(" are "),e("code",[a._v("amd64")]),a._v(", "),e("code",[a._v("arm")]),a._v(" or "),e("code",[a._v("arm64")]),a._v(".")]),a._v(" "),e("p",[e("code",[a._v("GOARM=$version")]),a._v(" If the target board architecture is "),e("code",[a._v("arm")]),a._v(" then you have\nto set the "),e("code",[a._v("GOARM")]),a._v(" or the "),e("code",[a._v("machine variable")]),a._v(". Current supported values\nare "),e("code",[a._v("6")]),a._v(" or "),e("code",[a._v("7")]),a._v(". For a detailed explanation please visit the official\n"),e("a",{attrs:{href:"https://github.com/golang/go/wiki/GoArm",target:"_blank",rel:"noopener noreferrer"}},[a._v("Golang ARM Wiki"),e("OutboundLink")],1),a._v(".")]),a._v(" "),e("p",[a._v("Now to build Golang static binaries; lets use one of these build methods:")]),a._v(" "),e("ol",[e("li",[a._v("ARMv6")])]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("env")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("CGO_ENABLED")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("GOOS")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("linux "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("GOARCH")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("arm "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("GOARM")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("6")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("\n        go build -tags "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v("'osusergo netgo'")]),a._v(" -ldflags "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v("'-extldflags \"-static\"'")]),a._v(" main.go\n")])])]),e("ol",{attrs:{start:"2"}},[e("li",[a._v("ARMv7")])]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("env")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("CGO_ENABLED")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("GOOS")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("linux "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("GOARCH")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("arm "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("GOARM")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("7")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("\n        go build -tags "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v("'osusergo netgo'")]),a._v(" -ldflags "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v("'-extldflags \"-static\"'")]),a._v(" main.go\n")])])]),e("ol",{attrs:{start:"3"}},[e("li",[a._v("amd64")])]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("env")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("CGO_ENABLED")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("GOOS")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("linux "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("GOARCH")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("amd64 "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("\n        go build -tags "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v("'osusergo netgo'")]),a._v(" -ldflags "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v("'-extldflags \"-static\"'")]),a._v(" main.go\n")])])]),e("h3",{attrs:{id:"more-static-binaries"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#more-static-binaries"}},[a._v("#")]),a._v(" More Static Binaries")]),a._v(" "),e("p",[a._v("We are going to add more static binaries support for other languages, it is under\ndevelopment.")]),a._v(" "),e("h3",{attrs:{id:"deploy-static-binaries-using-ionoid-io"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#deploy-static-binaries-using-ionoid-io"}},[a._v("#")]),a._v(" Deploy Static Binaries Using Ionoid.io")]),a._v(" "),e("p",[a._v("When deploying static binaries with "),e("a",{attrs:{href:"https://ionoid.io/",target:"_blank",rel:"noopener noreferrer"}},[a._v("Ionoid.io"),e("OutboundLink")],1),a._v(", there is no need\nto put it inside docker or write an "),e("code",[a._v("app.yaml")]),a._v(" file for it. If your\napplication has no external dependencies on either files or other\napplications, just upload it to the internet and point ionoid.io\nto its deployment URL.")]),a._v(" "),e("p",[a._v("An "),e("code",[a._v("app.yaml")]),a._v(" file will be auto-generated on the fly at the devices\nlevel using the following format:")]),a._v(" "),e("div",{staticClass:"language-yaml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" $myappname\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("version")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" $unixtimestamp\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("apps")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n        "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("$myappname")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n                "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("command")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("        /bin/$myappname\n")])])]),e("p",[a._v("Example of a generated "),e("code",[a._v("app.yaml")]),a._v(" of a "),e("code",[a._v("hello-world ARMv6")]),a._v(" version.")]),a._v(" "),e("p",[a._v("The complete source file and binaries of that hello-world App are\nlocated here:\nhttps://github.com/ionoid-io-projects/apps/tree/master/hello-world")]),a._v(" "),e("p",[a._v("Auto-generated "),e("code",[a._v("app.yaml")]),a._v(" of the hello-world example:")]),a._v(" "),e("div",{staticClass:"language-yaml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" hello"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("world\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("version")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1583693787")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("apps")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n        "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("hello-world")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n                "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("command")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("        /bin/hello"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("world\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("hello-world: is the the last resource file from the URL path.\n             In this example the URL is\n             'https://github.apps.ionoid.net/hello-world/arm6/build/bin/hello-world'\n             and the last part makes the App which is 'hello-world'.\n\nversion: is the Unix timestamp in UTC (Coordinated Universal Time).\n")])])]),e("p",[a._v("To deploy your static binaries, upload them to the internet, and point the\ndeployment URL to the right one.")]),a._v(" "),e("p",[a._v("For more examples please visit our hosted sample Apps here: "),e("a",{attrs:{href:"https://github.apps.ionoid.net/",target:"_blank",rel:"noopener noreferrer"}},[a._v("Ionoid.io\nSample Apps"),e("OutboundLink")],1)]),a._v(" "),e("p",[e("img",{attrs:{src:"Ionoid-deploy-static-binary.png",alt:"Deploy Static Binary"}})]),a._v(" "),e("p",[e("strong",[a._v("Notes: More robust deployment methods are being developped, they will be added soon.")])]),a._v(" "),e("h2",{attrs:{id:"archive-apps"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#archive-apps"}},[a._v("#")]),a._v(" Archive Apps")]),a._v(" "),e("p",[a._v("Archive Apps are apps compressed files in\n"),e("a",{attrs:{href:"https://en.wikipedia.org/wiki/Tar_(computing)",target:"_blank",rel:"noopener noreferrer"}},[a._v("tar"),e("OutboundLink")],1),a._v(" or\n"),e("a",{attrs:{href:"https://en.wikipedia.org/wiki/Zip_(file_format)",target:"_blank",rel:"noopener noreferrer"}},[a._v("Zip"),e("OutboundLink")],1),a._v(" formats.")]),a._v(" "),e("p",[a._v("Archive Apps are composed of the following files:")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("* app.yaml      : App Basic information encoded in a Yaml file\n\n* meta/         : Meta directory that contains extra App metadata (Optional).\n\n* bin/          : Binary directory where the App may reside.\n\n* ...           : Rest of the App file system and other dependencies files.\n")])])]),e("p",[a._v("Example of a hello world App:\n"),e("a",{attrs:{href:"https://storage.googleapis.com/public.opendevices.io/apps/arch/armv7/hello-world/hello-world-armv7-v0.2.tar",target:"_blank",rel:"noopener noreferrer"}},[a._v("IoT App Golang Hello World"),e("OutboundLink")],1)]),a._v(" "),e("p",[a._v("The content of the "),e("code",[a._v("app.yaml")]),a._v(" file would be:")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("name: hello-world\nversion: 1.0\napps:\n        hello-world:\n                command:        /bin/hello-world\n")])])]),e("h3",{attrs:{id:"build-archive-apps"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#build-archive-apps"}},[a._v("#")]),a._v(" Build Archive Apps")]),a._v(" "),e("p",[a._v("These steps describe how we built our previous example "),e("a",{attrs:{href:"https://storage.googleapis.com/public.opendevices.io/apps/arch/armv7/hello-world/hello-world-armv7-v0.2.tar",target:"_blank",rel:"noopener noreferrer"}},[a._v("Hello World IoT App"),e("OutboundLink")],1)]),a._v(" "),e("ul",[e("li",[e("ol",[e("li",[a._v("Create and enter the App directory "),e("code",[a._v("hello-world")]),a._v(":")])])])]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("mkdir")]),a._v(" hello-world\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("cd")]),a._v(" hello-world\n")])])]),e("ul",[e("li",[e("ol",{attrs:{start:"2"}},[e("li",[a._v("Populate the App directory with "),e("code",[a._v("app.yaml")]),a._v(" and executable files")])])])]),a._v(" "),e("p",[a._v("Content of hello-world directory should be:")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("hello-world:/\n        ./app.yaml\n        ./bin/\n                hello-world\n\n")])])]),e("p",[a._v("In the above example the app hello-world filesystem contains the\n"),e("code",[a._v("app.yaml")]),a._v(" file")]),a._v(" "),e("ul",[e("li",[e("ol",{attrs:{start:"3"}},[e("li",[a._v("Tar archive file:")])])])]),a._v(" "),e("p",[a._v("To generate the App tar archive follow the example.")]),a._v(" "),e("p",[a._v("Assuming you are building for ARMv7 use "),e("code",[a._v("armv7")]),a._v(" if you are building for\nARMv6 or amd64 then you can use corresponding arch. This is not\nmandatory, just best practice to be able to identify deployed tarball\nfiles.")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("cd")]),a._v(" hello-world\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("tar")]),a._v(" -cvf "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v("/hello-world-armv7-v0.2.tar *\n")])])]),e("p",[a._v("The "),e("code",[a._v("hello-world-armv7-v0.2.tar")]),a._v(" is our final App that can be deployed\nto our IoT Devices.")]),a._v(" "),e("ul",[e("li",[e("ol",{attrs:{start:"4"}},[e("li",[a._v("Or to generate the App zip archive")])])])]),a._v(" "),e("p",[e("strong",[a._v("Under development, will be supported soon.")])]),a._v(" "),e("h2",{attrs:{id:"docker-apps"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-apps"}},[a._v("#")]),a._v(" Docker Apps")]),a._v(" "),e("p",[e("a",{attrs:{href:"https://ionoid.io/",target:"_blank",rel:"noopener noreferrer"}},[a._v("Ionoid.io"),e("OutboundLink")],1),a._v(" supports "),e("a",{attrs:{href:"https://docker.com",target:"_blank",rel:"noopener noreferrer"}},[a._v("docker"),e("OutboundLink")],1),a._v(" containers and apps.")]),a._v(" "),e("p",[e("strong",[a._v("This is still under development and will be released soon.")])]),a._v(" "),e("h2",{attrs:{id:"snap-apps"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#snap-apps"}},[a._v("#")]),a._v(" Snap Apps")]),a._v(" "),e("p",[e("a",{attrs:{href:"https://ionoid.io/",target:"_blank",rel:"noopener noreferrer"}},[a._v("Ionoid.io"),e("OutboundLink")],1),a._v(" supports the Universal Linux Apps format\nthat is known as "),e("a",{attrs:{href:"https://snapcraft.io/",target:"_blank",rel:"noopener noreferrer"}},[a._v("Ubuntu Snap"),e("OutboundLink")],1),a._v(" apps. These apps\nare supported only on "),e("a",{attrs:{href:"https://ubuntu.com/core",target:"_blank",rel:"noopener noreferrer"}},[a._v("Ubuntu Core"),e("OutboundLink")],1),a._v(" Operating\nSystem.")]),a._v(" "),e("p",[e("a",{attrs:{href:"https://ubuntu.com/core",target:"_blank",rel:"noopener noreferrer"}},[a._v("Ubuntu Core"),e("OutboundLink")],1),a._v(" has 10 years security updates provided by "),e("a",{attrs:{href:"https://canonical.com",target:"_blank",rel:"noopener noreferrer"}},[a._v("Canonical"),e("OutboundLink")],1)]),a._v(" "),e("p",[e("strong",[a._v("This is still under development and will be released soon.")])]),a._v(" "),e("h2",{attrs:{id:"building-a-python-runtime-based-on-alpine-linux"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#building-a-python-runtime-based-on-alpine-linux"}},[a._v("#")]),a._v(" Building a Python Runtime Based on Alpine Linux")]),a._v(" "),e("p",[a._v("This section describes how to create a python runtime, using one of the following method:")]),a._v(" "),e("ol",[e("li",[a._v("Add python package and modules to a prepared runtime.")]),a._v(" "),e("li",[a._v("Build python runtime from scratch.")])]),a._v(" "),e("blockquote",[e("p",[a._v("if you have built a basic runtime following the previous section "),e("strong",[a._v("Build Basic Alpine Linux Runtime")]),a._v(", use the method 1, otherwise use  method 2.")])]),a._v(" "),e("h3",{attrs:{id:"add-python-package-and-modules-to-a-prepared-runtime"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#add-python-package-and-modules-to-a-prepared-runtime"}},[a._v("#")]),a._v(" Add Python Package and Modules to a Prepared Runtime")]),a._v(" "),e("ul",[e("li",[a._v("Open a terminal and create a directory for python runtime here named "),e("strong",[a._v("python-runtime")]),a._v(".")])]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("mkdir")]),a._v(" python-runtime\n")])])]),e("ul",[e("li",[a._v("Extract the built runtime prepared in the previous section "),e("strong",[a._v("alpine-3.9-armhf.tar")]),a._v(" in a directory called "),e("strong",[a._v("python-runtime")]),a._v(" using the following command.")])]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("tar")]),a._v(" -xvf alpine-3.9-armhf.tar -C python-runtime/\n")])])]),e("ul",[e("li",[a._v("Run the following command to enter the runtime.")])]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("chroot")]),a._v(" python-runtime/chroot/ /bin/sh -l\n")])])]),e("blockquote",[e("p",[a._v("We use "),e("strong",[a._v("apk")]),a._v(" command to add packages to the runtime, APK stands for Alpine Linux package manager.")]),a._v(" "),e("ul",[e("li",[a._v("To install a package the syntax is :")])]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("apk "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),a._v(" package-name\n")])])])]),a._v(" "),e("ul",[e("li",[a._v("Add python package to the runtime.")])]),a._v(" "),e("blockquote",[e("p",[a._v("Every command in the runtime is executed as "),e("strong",[a._v("root")]),a._v(".")])]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("apk "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),a._v(" --no-cache python3\n")])])]),e("ul",[e("li",[a._v("Install pip, the python package manager.")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("apk add --no-cache py-pip\n")])])]),e("ul",[e("li",[a._v("To exit from the runtime type "),e("strong",[a._v("exit")]),a._v(".")])]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("exit")]),a._v("\n")])])]),e("ul",[e("li",[a._v("Build the python runtime tarball using the following command.")])]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("tar")]),a._v(" cvvf python3-alpine-armhf.tar -C python-runtime/chroot/ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(".")]),a._v("\n")])])]),e("h3",{attrs:{id:"build-python-runtime-from-scratch"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#build-python-runtime-from-scratch"}},[a._v("#")]),a._v(" Build Python Runtime from Scratch")]),a._v(" "),e("h3",{attrs:{id:"a-create-basic-runtime-based-on-alpine-linux"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#a-create-basic-runtime-based-on-alpine-linux"}},[a._v("#")]),a._v(" a. Create basic runtime based on Alpine Linux")]),a._v(" "),e("ul",[e("li",[a._v("Open a terminal and change directory into pieman directory.")])]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("cd")]),a._v(" pieman\n")])])]),e("ul",[e("li",[a._v("Run the following command to build the runtime.")])]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("env")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("PROJECT_NAME")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("python-runtime "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("DEVICE")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("rpi-3-b "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("OS")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("alpine-3.9-armhf "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("CREATE_ONLY_CHROOT")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("true ./pieman.sh\n\n")])])]),e("ul",[e("li",[a._v("The built runtime will be located at "),e("strong",[a._v("build")]),a._v(" directory.")])]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("ls")]),a._v(" build/\n")])])]),e("p",[a._v("Sample output:")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("python-runtime\n\n")])])]),e("h3",{attrs:{id:"b-add-packages-to-runtime"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#b-add-packages-to-runtime"}},[a._v("#")]),a._v(" b. Add packages to runtime")]),a._v(" "),e("ul",[e("li",[a._v("To add packages to your runtime, go to build directory.")])]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("cd")]),a._v(" build\n")])])]),e("ul",[e("li",[a._v("To enter the runtime. Type the following command.")])]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("chroot")]),a._v(" python-runtime/chroot/ /bin/sh -l\n")])])]),e("blockquote",[e("p",[a._v("Every command in the runtime is executed as "),e("strong",[a._v("root")]),a._v(".")])]),a._v(" "),e("ul",[e("li",[a._v("Setup alpine packages repository.")])]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("setup-apkrepos\n")])])]),e("p",[a._v("Sample output:")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("Available mirrors:\n"),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" dl-cdn.alpinelinux.org\n"),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" nl.alpinelinux.org\n"),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" uk.alpinelinux.org\n"),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" dl-2.alpinelinux.org\n"),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" dl-3.alpinelinux.org\n"),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("6")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" dl-4.alpinelinux.org\n"),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("7")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" dl-5.alpinelinux.org\n"),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("8")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" dl-8.alpinelinux.org\n"),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("9")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" mirror.yandex.ru\n"),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("10")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" mirrors.gigenet.com\n"),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("11")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" mirror1.hs-esslingen.de\n"),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("12")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" mirror.leaseweb.com\n"),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("13")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" mirror.fit.cvut.cz\n"),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("14")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" alpine.mirror.far.fi\n"),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("15")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" alpine.mirror.wearetriple.com\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v(".\n\nr"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" Add random from the above list\nf"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" Detect and "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),a._v(" fastest mirror from above list\ne"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" Edit /etc/apk/repositories with text editor\n\nEnter mirror number "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("-44"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" or URL to "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("or r/f/e/done"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("f"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(":\n")])])]),e("ul",[e("li",[a._v("Install "),e("strong",[a._v("python")]),a._v(" package.")])]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("apk "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),a._v(" --no-cache python3\n")])])]),e("ul",[e("li",[a._v("Install "),e("strong",[a._v("pip")]),a._v(", the python package manager.")])]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("apk "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),a._v(" --no-cache py-pip\n")])])]),e("ul",[e("li",[a._v("Update the python package manger")])]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("pip3 "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("install")]),a._v(" --upgrade pip\n")])])]),e("ul",[e("li",[a._v("To exit from the runtime type "),e("strong",[a._v("exit")]),a._v(".")])]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("exit")]),a._v("\n")])])]),e("h3",{attrs:{id:"c-build-python-runtime-tarball"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#c-build-python-runtime-tarball"}},[a._v("#")]),a._v(" c. Build python runtime tarball.")]),a._v(" "),e("ul",[e("li",[a._v("Once you finish to add all the python modules you need for your runtime, build the python runtime tarball using the following command.")])]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("tar")]),a._v(" cvvf python3-alpine-armhf.tar -C python-runtime/chroot/ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(".")]),a._v("\n")])])]),e("h3",{attrs:{id:"add-python-modules"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#add-python-modules"}},[a._v("#")]),a._v(" Add Python Modules")]),a._v(" "),e("ul",[e("li",[a._v("You can add additional python module to your runtime before building the tarball using python package manager.")]),a._v(" "),e("li",[a._v("Here as "),e("strong",[a._v("example")]),a._v(" we are going to install module to control Raspberry Pi GPIO channels.")])]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("pip3 "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("install")]),a._v(" RPi.GPIO\n")])])]),e("h2",{attrs:{id:"building-a-node-js-runtime-based-on-alpine-linux"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#building-a-node-js-runtime-based-on-alpine-linux"}},[a._v("#")]),a._v(" Building a Node.js runtime based on Alpine Linux")]),a._v(" "),e("p",[a._v("This section describes how to create a Node.js runtime , using one of the following method:")]),a._v(" "),e("ol",[e("li",[a._v("Add Node.js package to a prepared runtime.")]),a._v(" "),e("li",[a._v("Build Node.js runtime from scratch.")])]),a._v(" "),e("blockquote",[e("p",[a._v("if you have built a basic runtime following the previous section "),e("strong",[a._v("Build Basic Alpine Linux Runtime")]),a._v(", use the method 1, otherwise use  method 2.")])]),a._v(" "),e("h3",{attrs:{id:"add-node-js-package-and-modules-to-a-prepared-runtime"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#add-node-js-package-and-modules-to-a-prepared-runtime"}},[a._v("#")]),a._v(" Add Node.js Package and Modules to a Prepared Runtime")]),a._v(" "),e("ul",[e("li",[a._v("Open a terminal and create a directory for Node.js runtime here named nodejs-runtime.")])]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("mkdir")]),a._v(" nodejs-runtime\n")])])]),e("ul",[e("li",[a._v("Extract the built runtime prepared in the previous section "),e("strong",[a._v("alpine-3.9-armhf.tar")]),a._v(" in a directory called "),e("strong",[a._v("nodejs-runtime")]),a._v(" using the following command.")])]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("tar")]),a._v(" -xvf alpine-3.9-armhf.tar -C nodejs-runtime/\n")])])]),e("ul",[e("li",[a._v("Run the following command to enter the runtime.")])]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("chroot")]),a._v(" nodejs-runtime/chroot/ /bin/sh -l\n")])])]),e("blockquote",[e("p",[a._v("We use "),e("strong",[a._v("apk")]),a._v(" command to add packages to the runtime, APK stands for Alpine Linux package manager.")]),a._v(" "),e("ul",[e("li",[a._v("To install a package the syntax is :")])]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("apk "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),a._v(" package-name\n")])])])]),a._v(" "),e("ul",[e("li",[a._v("Add Node.js package to the runtime.")])]),a._v(" "),e("blockquote",[e("p",[a._v("Every command in the runtime is executed as "),e("strong",[a._v("root")]),a._v(".")])]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("apk "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),a._v(" --no-cache nodejs\n")])])]),e("ul",[e("li",[a._v("Install npm, the Node.js package manager.")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("apk add --no-cache npm\n")])])]),e("ul",[e("li",[a._v("To exit from the runtime type "),e("strong",[a._v("exit")]),a._v(".")])]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("exit")]),a._v("\n")])])]),e("ul",[e("li",[a._v("Build the tarball.")])]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("tar")]),a._v(" cvvf nodejs-alpine-armhf.tar -C nodejs-runtime/chroot/ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(".")]),a._v("\n")])])]),e("h3",{attrs:{id:"build-node-js-runtime-from-scratch"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#build-node-js-runtime-from-scratch"}},[a._v("#")]),a._v(" Build Node.js Runtime From Scratch")]),a._v(" "),e("h3",{attrs:{id:"a-create-basic-runtime-based-on-alpine-linux-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#a-create-basic-runtime-based-on-alpine-linux-2"}},[a._v("#")]),a._v(" a. Create basic runtime  based on Alpine Linux.")]),a._v(" "),e("ul",[e("li",[a._v("Open a terminal and change directory into pieman directory.")])]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("cd")]),a._v(" pieman\n")])])]),e("ul",[e("li",[a._v("Run the following command to build the runtime.")])]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("env")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("PROJECT_NAME")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("nodejs-runtime "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("DEVICE")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("rpi-3-b "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("OS")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("alpine-3.9-armhf "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("CREATE_ONLY_CHROOT")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("true ./pieman.sh\n")])])]),e("ul",[e("li",[a._v("The built runtime will be located at "),e("strong",[a._v("build")]),a._v(" directory.")])]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("ls")]),a._v(" build\n")])])]),e("p",[a._v("Sample output:")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("nodejs-runtime\n")])])]),e("h3",{attrs:{id:"b-add-packages-to-node-js-runtime"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#b-add-packages-to-node-js-runtime"}},[a._v("#")]),a._v(" b. Add packages to Node.js runtime.")]),a._v(" "),e("ul",[e("li",[a._v("To enter the runtime, run the following command.")])]),a._v(" "),e("blockquote",[e("p",[a._v("Every command in the runtime is executed as "),e("strong",[a._v("root")]),a._v(".")])]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("chroot")]),a._v(" build/nodejs-runtime/chroot/ /bin/sh -l\n")])])]),e("ul",[e("li",[a._v("Setup alpine packages repository.")])]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("setup-apkrepos\n")])])]),e("p",[a._v("Sample output:")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("Available mirrors:\n"),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" dl-cdn.alpinelinux.org\n"),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" nl.alpinelinux.org\n"),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" uk.alpinelinux.org\n"),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" dl-2.alpinelinux.org\n"),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" dl-3.alpinelinux.org\n"),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("6")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" dl-4.alpinelinux.org\n"),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("7")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" dl-5.alpinelinux.org\n"),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("8")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" dl-8.alpinelinux.org\n"),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("9")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" mirror.yandex.ru\n"),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("10")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" mirrors.gigenet.com\n"),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("11")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" mirror1.hs-esslingen.de\n"),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("12")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" mirror.leaseweb.com\n"),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("13")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" mirror.fit.cvut.cz\n"),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("14")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" alpine.mirror.far.fi\n"),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("15")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" alpine.mirror.wearetriple.com\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v(".\n\nr"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" Add random from the above list\nf"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" Detect and "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),a._v(" fastest mirror from above list\ne"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" Edit /etc/apk/repositories with text editor\n\nEnter mirror number "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("-44"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" or URL to "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("or r/f/e/done"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("f"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(":\n")])])]),e("ul",[e("li",[a._v("Install "),e("strong",[a._v("Node.js")]),a._v(" package.")])]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("apk "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),a._v(" --no-cache nodejs\n")])])]),e("ul",[e("li",[a._v("Install "),e("strong",[a._v("npm")]),a._v(" the Node.js package manager.")])]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("apk "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),a._v(" --no-cache "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("npm")]),a._v("\n")])])]),e("h3",{attrs:{id:"c-build-node-js-runtime-tarball"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#c-build-node-js-runtime-tarball"}},[a._v("#")]),a._v(" c. Build Node.js runtime tarball.")]),a._v(" "),e("ul",[e("li",[a._v("Once you finish to add all the Node.js modules you need for your runtime, build the tarball.")])]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("tar")]),a._v(" cvvf alpine-3.9-armhf-nodejs.tar -C nodejs-runtime/chroot/ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(".")]),a._v("\n")])])]),e("ul",[e("li",[a._v("exit to leave the runtime.")])]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("exit")]),a._v("\n")])])]),e("h3",{attrs:{id:"add-node-js-modules"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#add-node-js-modules"}},[a._v("#")]),a._v(" Add Node.js Modules")]),a._v(" "),e("ul",[e("li",[a._v("You can add additional python module to your runtime before building the tarball using Node.js package manager.")]),a._v(" "),e("li",[a._v("Here as example we are going to install "),e("strong",[a._v("bootstrap")]),a._v(" framework.")])]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("npm")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("install")]),a._v("   bootstrap\n")])])])])}),[],!1,null,null,null);t.default=n.exports}}]);